#!/usr/bin/env php
<?php

if (ini_get('phar.readonly') === '1') {
    throw new \Exception(
        'Writing to phar files is disabled. Change your `php.ini` or append `-d phar.readonly=false` to the shebang, if supported by your `env` executable.'
    );
}

define('__ROOT__', realpath(__DIR__ . '/..'));
chdir(__ROOT__);

$opt = getopt('v:', ['nozip']);

if (
    version_compare(PHP_VERSION, '8.0', '<')
    || version_compare(PHP_VERSION, '8.1', '>=')
) {
    throw new \Exception('Run build in php version ~8.0.0');
}

echo shell_exec(sprintf('%s -v', PHP_BINARY));
`rm -rf ./vendor`;
`rm -f ./composer.lock`;
shell_exec(sprintf('%s ./composer.phar install --no-dev --prefer-dist --optimize-autoloader', PHP_BINARY));

$pharName = "docker-ws.phar";
$pharFile = __ROOT__ . '/' . $pharName;
if (file_exists($pharFile)) {
    unlink($pharFile);
}

$ignore = [
    '.docker',
    '.idea',
    '.git',
    '.docker',
    'deploy.php',
];

$phar = new \Phar($pharFile, 0, $pharName);
$phar->setSignatureAlgorithm(\Phar::SHA1);
$phar->startBuffering();
$iterator = new RecursiveDirectoryIterator(__ROOT__, FilesystemIterator::SKIP_DOTS);
$iterator = new RecursiveCallbackFilterIterator($iterator, function (SplFileInfo $fileInfo) use ($ignore) {
    return !in_array($fileInfo->getBasename(), $ignore, true);
});
$iterator = new RecursiveIteratorIterator($iterator);
//$iterator = new CallbackFilterIterator($iterator, function (SplFileInfo $fileInfo) {
//    return true;
//});

foreach ($iterator as $fileInfo) {
    $file = str_replace(__ROOT__, '', $fileInfo->getRealPath());
    echo "Add file: " . $file . "\n";
    $phar->addFile($fileInfo->getRealPath(), $file);

    try {
        if (!array_key_exists('nozip', $opt)) {
            $phar[$file]->compress(Phar::GZ);

            if (!$phar[$file]->isCompressed()) {
                echo "Could not compress File: $file\n";
            }
        }
    } catch (\Throwable) {
    }
}

// Add schema.json
//echo "Add file: /src/schema.json\n";
//$phar->addFile(realpath(__DIR__ . '/../src/schema.json'), '/src/schema.json');

// Add bin/dep file
echo "Add file: /bin/docker-ws\n";
$depContent = file_get_contents(__ROOT__ . '/bin/docker-ws');
$depContent = str_replace("#!/usr/bin/env php\n", '', $depContent);
$depContent = str_replace('__FILE__', 'str_replace("phar://", "", Phar::running())', $depContent);
//$depContent = preg_replace("/run\('.+?'/", "run('$version'", $depContent);
$phar->addFromString('bin/docker-ws', $depContent);
$phar->setStub(
    <<<STUB
#!/usr/bin/env php
<?php
Phar::mapPhar('{$pharName}');
require 'phar://{$pharName}/bin/docker-ws';
__HALT_COMPILER();
STUB
);
$phar->stopBuffering();
unset($phar);

echo "$pharName was created successfully.\n";
